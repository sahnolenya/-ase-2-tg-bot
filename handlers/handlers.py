from aiogram import types, Router, F
from aiogram.filters import Command
from .keyboard import (
    get_main_keyboard,
    get_news_keyboard,
    get_categories_keyboard,
    get_international_news_keyboard,
    get_role_keyboard,
    get_confirm_keyboard
)
from database import Session, User, generate_tutor_code
import logging

router = Router()
logger = logging.getLogger(__name__)


async def register_user(user_id: int, username: str, role: str = None, tutorcode: str = None, subscribe: str = None):
    with Session() as session:
        user = session.get(User, user_id)
        if not user:
            user = User(
                userid=user_id,
                username=username,
                role=role,
                tutorcode=tutorcode,
                subscribe=subscribe
            )
            session.add(user)
        else:
            user.role = role or user.role
            user.tutorcode = tutorcode or user.tutorcode
            user.subscribe = subscribe or user.subscribe
        session.commit()
        return user


@router.message(Command("start"))
async def process_start_command(message: types.Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ –≤—ã? –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–ª—É—à–∞—Ç–µ–ª—å?",
        reply_markup=get_role_keyboard()
    )


@router.message(F.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def handle_teacher(message: types.Message):
    tutor_code = generate_tutor_code()
    await register_user(
        message.from_user.id,
        message.from_user.username or message.from_user.full_name,
        role="teacher",
        tutorcode=tutor_code
    )
    await message.answer(
        f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –í–∞—à –∫–æ–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {tutor_code}",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "–°–ª—É—à–∞—Ç–µ–ª—å")
async def handle_student(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=get_confirm_keyboard()
    )


@router.message(F.text.regexp(r'^[A-Z0-9]{6}$'))
async def handle_tutor_code(message: types.Message):
    with Session() as session:
        teacher = session.query(User).filter(
            User.tutorcode == message.text,
            User.role == "teacher"
        ).first()

        if teacher:
            await register_user(
                message.from_user.id,
                message.from_user.username or message.from_user.full_name,
                role="student",
                subscribe=teacher.username
            )
            await message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username}!",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_confirm_keyboard()
            )


@router.message(Command("status"))
async def handle_status(message: types.Message):
    with Session() as session:
        user = session.get(User, message.from_user.id)

        if not user:
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        if user.role == "student":
            await message.answer(
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å: –°–ª—É—à–∞—Ç–µ–ª—å\n"
                f"ID: {user.userid}\n"
                f"–ò–º—è: {user.username}\n"
                f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {user.subscribe}"
            )
        elif user.role == "teacher":
            await message.answer(
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
                f"ID: {user.userid}\n"
                f"–ò–º—è: {user.username}\n"
                f"–ö–æ–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {user.tutorcode}"
            )


@router.message(F.text == "–ù–æ–≤–æ—Å—Ç–∏")
async def handle_news(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=get_news_keyboard())


@router.message(F.text == "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ")
async def handle_international(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=get_international_news_keyboard())


@router.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å")
async def handle_refresh(message: types.Message):
    await message.answer("–ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_main_keyboard())


@router.message(F.text.in_(["–Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω", "–ù–æ–≤–æ—Å—Ç–∏ –†–ë–ö", "–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏"]))
async def handle_news_source(message: types.Message):
    source_map = {
        "–Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω": "yandex",
        "–ù–æ–≤–æ—Å—Ç–∏ –†–ë–ö": "rbc",
        "–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏": "ria"
    }
    source = source_map[message.text]
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {message.text}:", reply_markup=get_categories_keyboard(source))


@router.message(F.text.in_(["–°–ø–æ—Ä—Ç", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–ê–≤—Ç–æ", "–ù–∞—É–∫–∞"]))
async def handle_category(message: types.Message):
    # –°–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_links = {
        "yandex": {
            "–°–ø–æ—Ä—Ç": "https://sportsdzen.ru/news/rubric/sport?utm_source=yxnews&utm_medium=desktop",
            "–ü–æ–ª–∏—Ç–∏–∫–∞": "https://dzen.ru/news/rubric/politics",
            "–ê–≤—Ç–æ": "https://dzen.ru/news/rubric/auto"
        },
        "rbc": {
            "–°–ø–æ—Ä—Ç": "https://sportrbc.ru/?utm_source=topline",
            "–ü–æ–ª–∏—Ç–∏–∫–∞": "https://www.rbc.ru/politics/?utm_source=topline",
            "–ê–≤—Ç–æ": "https://www.autonews.ru/?utm_source=topline"
        },
        "ria": {
            "–°–ø–æ—Ä—Ç": "https://rsport.ria.ru/",
            "–ü–æ–ª–∏—Ç–∏–∫–∞": "https://ria.ru/politics/",
            "–ù–∞—É–∫–∞": "https://ria.ru/science/"
        }
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if message.text == "–ù–∞—É–∫–∞":
        source = "ria"
    elif message.text in category_links["yandex"]:
        source = "yandex"
    else:
        source = "rbc"

    link = category_links[source][message.text]

    source_names = {
        "yandex": "–Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω",
        "rbc": "–†–ë–ö",
        "ria": "–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏"
    }

    await message.answer(
        f"üì∞ {source_names[source]} - {message.text}\nüîó {link}",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "CNN International")
async def handle_cnn(message: types.Message):
    await message.answer("üåê CNN International News\nüîó https://edition.cnn.com", reply_markup=get_main_keyboard())


@router.message(F.text == "Japan News")
async def handle_japan_news(message: types.Message):
    await message.answer("üóæ Japan Times News\nüîó https://www.japantimes.co.jp", reply_markup=get_main_keyboard())


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())


@router.message(F.text == "help")
async def help_command(message: types.Message):
    logger.info(f"User {message.from_user.id} requested help")
    await message.answer("–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                         "/status - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n"
                         "–ù–æ–≤–æ—Å—Ç–∏ - –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")


def register_message_handlers(dp):
    dp.include_router(router)